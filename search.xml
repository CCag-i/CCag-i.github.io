<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS——ES6语法</title>
    <url>/2021/07/20/js%E2%80%94%E2%80%94ES6%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><h3 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h3><p>使用``括住字符串，可实现多行字符串</p>
<h3 id="字符串占位符"><a href="#字符串占位符" class="headerlink" title="字符串占位符"></a>字符串占位符</h3><p><code>$&#123;变量名&#125;</code> 用法与插值表达式类似</p>
<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>在函数的参数列表中最后一项参数前加<code>...</code>，可以列表形式接受任意数量参数。</p>
<h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><p>在变量前加<code>...</code>，可以将一个数组转化为若干个独立的参数<br>复制数组对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1;       <span class="comment">//arr2与arr1是同一个数组对象</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [..arr1];   <span class="comment">//arr3与arr1是两个不同的数组对象</span></span><br><span class="line"></span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>]);  <span class="comment">//arr2中的元素同时被改变，输出：4</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3[<span class="number">0</span>]);  <span class="comment">//输出：1</span></span><br></pre></td></tr></table></figure>
<p>合并数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...arr1, ...arr2, ...arr3]);<span class="comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure>
<h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><p>当一个对象的属性与本地变量同名时，可以不用写冒号和值，简单地只写属性名即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCar</span>(<span class="params">color,doors</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="comment">//有同名的参数只写属性名即可</span></span><br><span class="line">		color,</span><br><span class="line">		doors</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="comment">//有同名的本地变量，只写属性名即可</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;name, age&#125;;</span><br></pre></td></tr></table></figure>
<p>对象方法的简写语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5及早先版本</span></span><br><span class="line"><span class="keyword">var</span> car = &#123;</span><br><span class="line">	<span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">	<span class="attr">doors</span>: <span class="number">4</span>,</span><br><span class="line">	<span class="attr">showColor</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="built_in">this</span>.color);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> car = &#123;</span><br><span class="line">	<span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">	<span class="attr">doors</span>: <span class="number">4</span>,</span><br><span class="line">	<span class="function"><span class="title">showColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="built_in">this</span>.color);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">car.showColor();</span><br><span class="line"><span class="built_in">console</span>.log(car.showColor.name); <span class="comment">//showColor</span></span><br></pre></td></tr></table></figure>
<p>可计算的属性名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> suffix = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">	[<span class="string">&quot;fitst &quot;</span> + suffix] : <span class="string">&quot;san&quot;</span>,</span><br><span class="line">	[<span class="string">&quot;last &quot;</span> + suffix] : <span class="string">&quot;zhang&quot;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person);<span class="comment">//&#123;&#x27;first name&#x27;: &#x27;san&#x27;,&#x27;last name&#x27;: &#x27;zhang&#x27;,age: 20&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;Tony&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">//Tony</span></span><br><span class="line"><span class="built_in">console</span>.log(age);  <span class="comment">//18</span></span><br></pre></td></tr></table></figure>
<p>若变量之前已经声明，想用解构语法赋值，则要圆括号包裹</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name, age;</span><br><span class="line">&#123;name, age&#125; = person;    <span class="comment">//语法错误</span></span><br><span class="line">(&#123;name, age&#125; = person);	 <span class="comment">//正确</span></span><br></pre></td></tr></table></figure>
<p><em>Javascript 引擎将一对开放的花括号视为一个代码块，而语法规定，代码块语句不允许出现在赋值语句的左侧，添加圆括号后可以将块语句转化为一个表达式，从而实现整个解构赋值的过程。</em></p>
<p>对象中不存在某个变量<br><code>let &#123;name, age, height = 180&#125; = person;</code></p>
<p>使用不同于属性名的变量名<br><code>let &#123;name: name1, age: age1&#125; = person;</code></p>
<p>嵌套的对象提取值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = &#123;</span><br><span class="line">	<span class="attr">num</span>: <span class="number">2</span>,</span><br><span class="line">	<span class="attr">name</span>: &#123;</span><br><span class="line">		<span class="attr">per1</span>: <span class="string">&#x27;Tony&#x27;</span>,</span><br><span class="line">		<span class="attr">per2</span>: <span class="string">&#x27;Cendy&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;num, <span class="attr">name</span>: &#123;<span class="attr">per1</span>: theName&#125;&#125; = people;</span><br><span class="line"><span class="built_in">console</span>.log(theName);  <span class="comment">//Tony</span></span><br></pre></td></tr></table></figure>
<p><em><code>name: &#123;per1: theName&#125;</code>的含义是在people对象的name属性后，继续深入下一层（即name对象中）查找per1属性，并将其值赋给theName局部变量。</em></p>
<p>结合展开运算符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;Tony&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;...newObject&#125; = person;</span><br><span class="line"><span class="keyword">let</span> &#123;anotherObject&#125; = person;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age, gendar&#125; = &#123;...person, <span class="attr">gender</span>: <span class="string">&#x27;man&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(newObject);        <span class="comment">//&#123;name: &#x27;Tony&#x27;, age: 18&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(anotherObject);    <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(gendar);           <span class="comment">//man</span></span><br></pre></td></tr></table></figure>
<p><em>注意第五行和第六行的区别，后者是提取 person 对象中的 annotherObject 属性并赋值给 anotherObject 变量，由于 person 对象没有该属性，因此为undefined。</em></p>
<h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><p>与对象解构类似</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选取指定位置元素</span></span><br><span class="line"><span class="keyword">let</span> [,,c] = arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//与对象解构区别：不需要使用圆括号包裹语句</span></span><br><span class="line"><span class="keyword">let</span> a, b, c;</span><br><span class="line">[a, b, c] = arr;   <span class="comment">//ok</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//赋默认值</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c, d = <span class="number">0</span>] = arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//嵌套数组</span></span><br><span class="line"><span class="keyword">let</span> catagories = [<span class="string">&quot;c&quot;</span>, [<span class="string">&quot;vue&quot;</span>, <span class="string">&quot;react&quot;</span>]];</span><br><span class="line"><span class="keyword">let</span> [language1, [, language2]] = catagories;</span><br><span class="line"><span class="built_in">console</span>.log(language2); <span class="comment">//react</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//展开运算符</span></span><br><span class="line"><span class="keyword">let</span> [a, ...others] = arr;</span><br><span class="line"><span class="keyword">let</span> [...newArr] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(others[<span class="number">0</span>]); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单一参数、函数体只有一条语句的箭头函数</span></span><br><span class="line"><span class="keyword">let</span> welcome = <span class="function"><span class="params">msg</span> =&gt;</span> msg;</span><br><span class="line"><span class="comment">/*相当于</span></span><br><span class="line"><span class="comment">function welcome(msg)&#123;</span></span><br><span class="line"><span class="comment">	return msg;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="built_in">console</span>.log(welcome(<span class="string">&quot;welcome you&quot;</span>));  <span class="comment">//welcome you</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多个参数</span></span><br><span class="line"><span class="keyword">let</span> welcome = <span class="function">(<span class="params">user, msg</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;user&#125;</span>, <span class="subst">$&#123;msg&#125;</span>`</span>;</span><br><span class="line"><span class="comment">/*相当于</span></span><br><span class="line"><span class="comment">function welcome(user, msg)&#123;</span></span><br><span class="line"><span class="comment">	return user + &quot;, &quot; + msg;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="built_in">console</span>.log(welcome(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;welcome you&quot;</span>));<span class="comment">//zhangsan, welcome you</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有参数</span></span><br><span class="line"><span class="keyword">let</span> welcome = <span class="function">() =&gt;</span> <span class="string">&quot;welcome you&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(welcome()); <span class="comment">//welcome you</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值是对象字面量</span></span><br><span class="line"><span class="keyword">let</span> createCar = <span class="function">(<span class="params">color, doors</span>) =&gt;</span> (&#123;<span class="attr">color</span>: color, <span class="attr">doors</span>: doors&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(createCar(<span class="string">&quot;black&quot;</span>, <span class="number">4</span>)); <span class="comment">//&#123;color: &#x27;black&#x27;, doors: 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结合对象解构</span></span><br><span class="line"><span class="keyword">let</span> personInfo = <span class="function">(<span class="params">&#123;name, age&#125;</span>) =&gt;</span> <span class="string">`$(name)&#x27;s age is $(age).`</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(personInfo(person)); <span class="comment">//zhangsan&#x27;s age is 18.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>构造函数：<code>constructor()&#123;&#125;</code></p>
<h4 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h4><p>通过关键字 get 和 set 创建，实际上是为某个属性定义取值和设值函数，以属性访问的方式使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">sName, iDoors</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>._name= sName;</span><br><span class="line">		<span class="built_in">this</span>.doors= iDoors;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//只读属性</span></span><br><span class="line">	<span class="keyword">get</span> <span class="title">desc</span>()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> is worth having.`</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">get</span> <span class="title">name</span>()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">set</span> <span class="title">name</span>(<span class="params">value</span>)&#123;</span><br><span class="line">		<span class="built_in">this</span>._name = value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> Car(<span class="string">&quot;Benz&quot;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.name); <span class="comment">//Benz</span></span><br><span class="line"><span class="built_in">console</span>.log(car.desc); <span class="comment">//Benz is worth having.</span></span><br><span class="line">car.name = <span class="string">&quot;Ferrari&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(car.name); <span class="comment">//Ferrari</span></span><br><span class="line">car.prototype.desc = <span class="string">&quot;very good&quot;</span>;<span class="comment">//TypeError:Cannot set property &#x27;desc&#x27; of undefined</span></span><br></pre></td></tr></table></figure>
<p>构造函数中定义的 _name 属性前下划线是一种常用的约定记号，用于表示只能通过对象方法访问的属性。只读的属性使用 get 方法，只写的属性提供 set 方法。</p>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">static</span> <span class="function"><span class="title">createDefault</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Car(<span class="string">&quot;Audi&quot;</span>, <span class="number">4</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> car = Car.createDefault();</span><br><span class="line"><span class="built_in">console</span>.log(car.name);  <span class="comment">//Audi</span></span><br><span class="line">car.createDefault();    <span class="comment">//TypeError: car.createDefault is not a function</span></span><br></pre></td></tr></table></figure>
<p>使用 static 关键字定义的静态方法，只能通过类名来访问，不能通过实例来访问。此外，ES6没有提供静态属性，所以不能在实例属性前面加 static 关键字</p>
<h4 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h4><p>使用 extends 关键字实现类的继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">name, no</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">super</span>(name);<span class="comment">//调用基类的constructor(name)</span></span><br><span class="line">		<span class="built_in">this</span>.no = no;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 super() 调用基类的构造函数并传入相应的参数。<br><em>如果在派生类中定义了构造函数，则必须调用 super() ，而且一定要在访问 this 之前调用。如果在派生类中没有定义构造函数，当创建派生类的实例时会自动调用 super() 并传入所有参数。</em></p>
<p>派生类中可以重写基类中的方法</p>
<p>若在派生类中调用基类的同名函数可以加 super 关键字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="function"><span class="title">work</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">super</span>.work();</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;studying...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>一个模块通常都是一个独立的 JS 文件，改文件内部定义的变量和函数除非被导出，否则不能被外部所访问。使用 export 关键字放置在需要暴露给其他模块使用的变量、函数或者类声明前面，以将它们从模块中导出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导出数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&quot;module&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sizeOfPage = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sun</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将在模块末尾进行导出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substract</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b !== <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出类</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">sColor, iDoors</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.color = sColor;</span><br><span class="line">		<span class="built_in">this</span>.doors = iDoors;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">showColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="built_in">this</span>.color);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模块的私有变量</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//模块的私有函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeCount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出 multiply 函数</span></span><br><span class="line"><span class="keyword">export</span> &#123;multiply&#125;;</span><br><span class="line"><span class="comment">//subtract是本地名称，sub 是导出时使用的名称</span></span><br><span class="line"><span class="keyword">export</span> &#123;subtract <span class="keyword">as</span> sub&#125;；</span><br><span class="line"><span class="comment">//导出模块默认值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> divide;</span><br></pre></td></tr></table></figure>
<p>一个模块可以导出且只能导出一个默认值，默认值通过使用 default 关键字指定的单个变量、函数或者类。非默认值的导出，需要使用一对花括号包裹名称，默认值不需要</p>
<p>默认值的导出还可以使用下面两种语法形式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b !== <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------//</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b !== <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;divide <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>导入通过使用 import 关键字来引入其他模块导出的功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入模块默认值</span></span><br><span class="line"><span class="keyword">import</span> divide <span class="keyword">from</span> <span class="string">&quot;./Modules.js&quot;</span>;</span><br><span class="line"><span class="comment">//导入多个绑定</span></span><br><span class="line"><span class="keyword">import</span> &#123;color, name, siziOfPage&#125; <span class="keyword">from</span> <span class="string">&quot;./Module.js&quot;</span>;</span><br><span class="line"><span class="comment">//导入单个绑定</span></span><br><span class="line"><span class="keyword">import</span> &#123;multiply&#125; <span class="keyword">from</span> <span class="string">&quot;./Modules.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;sub&#125; <span class="keyword">from</span> <span class="string">&quot;./Modules.js&quot;</span>;         <span class="comment">//模块导出时使用名称sub</span></span><br><span class="line"><span class="keyword">import</span> &#123;sub <span class="keyword">as</span> add&#125; <span class="keyword">from</span> <span class="string">&quot;./Modules.js&quot;</span>;  <span class="comment">//导入时重命名函数</span></span><br><span class="line"><span class="comment">//导入类</span></span><br><span class="line"><span class="keyword">import</span> &#123;Car&#125; <span class="keyword">from</span> <span class="string">&quot;./Modules.js&quot;</span>;</span><br><span class="line"><span class="comment">//导入整个模块</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> example <span class="keyword">from</span> <span class="string">&quot;./Modules.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(color);          <span class="comment">//red</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">6</span>,<span class="number">2</span>));       <span class="comment">//8         *注意是add</span></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> Car(<span class="string">&quot;black&quot;</span>, <span class="number">4</span>);</span><br><span class="line">car.showColor();             <span class="comment">//black</span></span><br><span class="line"><span class="built_in">console</span>.log(example.name);   <span class="comment">//module</span></span><br><span class="line"><span class="built_in">console</span>.log(example.sum(<span class="number">6</span>, <span class="number">2</span>)); <span class="comment">//8      *注意是sum</span></span><br><span class="line"><span class="built_in">console</span>.log(example.count);  <span class="comment">//undefined</span></span><br><span class="line">                             <span class="comment">//私有变量无法访问</span></span><br></pre></td></tr></table></figure>
<ol>
<li><em>导入模块若使用相对路径，同一目录下的文件必须加 “./“</em></li>
<li><em>export 和 import 语句必须在其他语句或者函数之外使用，即只能在模块的顶层使用</em></li>
</ol>
<h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3>]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2021/07/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>我开始使用博客啦！</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL——MySQL基本操作</title>
    <url>/2021/08/10/MySQL%E2%80%94%E2%80%94MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="数据库基本介绍"><a href="#数据库基本介绍" class="headerlink" title="数据库基本介绍"></a>数据库基本介绍</h1><ul>
<li>数据库基本知识</li>
<li>数据库分类</li>
<li>SQL简介</li>
<li>MySQL访问</li>
</ul>
<h3 id="1、数据库基本知识"><a href="#1、数据库基本知识" class="headerlink" title="1、数据库基本知识"></a>1、数据库基本知识</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>数据库</strong>: database，是一种存储数据的仓库</p>
<ul>
<li>数据库是根据数据结构组织、存储和管理数据</li>
<li>数据库能够长期、高效的管理和存储数据</li>
<li>数据库的目的就是能够存储（写）和提供（读）数据</li>
</ul>
<h3 id="2、数据库分类"><a href="#2、数据库分类" class="headerlink" title="2、数据库分类"></a>2、数据库分类</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>数据库分类</strong>：根据数据库的架构和数据组织原理进行分类</p>
<p>1、早期根据数据库的组织数据的存储模型分类</p>
<ul>
<li>层次数据库：基于层次的数据结构（数据分层）</li>
<li>网状数据库：基于网状的数据结构（数据网络）</li>
<li>关系数据库：基于关系模型的数据结构（二维表）<br>2、现在较多根据实际数据管理模型分类（存储介质）</li>
<li>关系型数据库：基于关系模型的数据结构（二维表）通常存储在磁盘</li>
<li>非关系型数据库：没有具体模型的数据结构（键值对）通常存储在内存</li>
</ul>
<h3 id="3、关系型数据库"><a href="#3、关系型数据库" class="headerlink" title="3、关系型数据库"></a>3、关系型数据库</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>关系型数据库</strong>：是一种建立在关系模型上的数据库</p>
<ul>
<li>关系模型<ul>
<li>关系数据结构（存储）</li>
<li>关系操作集合（操作）</li>
<li>关系完整性约束（约束）</li>
</ul>
</li>
<li>关系型数据库存储在磁盘中（永久性存储）</li>
<li>关系型数据库系统（DBS）模型有四层结构<ul>
<li>数据库管理系统（DBMS）：管理系统运行（DataBase Management System）</li>
<li>数据库（DB）：数据存储的管理者（小管理，受DBMS管理）</li>
<li>数据表（Table）：数据关系管理者</li>
<li>数据字段（Field）：实际数据存储者</li>
</ul>
</li>
<li>关系型数据库产品<ul>
<li>大型：Oracle、DB2</li>
<li>中型：MySQL、SqlServer</li>
<li>小型：Sybase、Access</li>
</ul>
</li>
</ul>
<h3 id="4、非关系型数据库"><a href="#4、非关系型数据库" class="headerlink" title="4、非关系型数据库"></a>4、非关系型数据库</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>非关系型数据库</strong>：NoSQL（Not only SQL），不仅仅是关系型数据库</p>
<ul>
<li>所有不是关系型数据库的统称</li>
<li>数据存储模型不是二维表，而是键值对</li>
<li>存储的位置通常是内存（效率高）</li>
<li>不能永久性存储（需要定时存到关系型数据库里）</li>
<li>常见的非关系型数据库产品<ul>
<li>MongoDB</li>
<li>Redis</li>
<li>Memcached</li>
</ul>
</li>
</ul>
<blockquote>
<p>对比</p>
</blockquote>
<p>NoSQL通常是与关系型数据库配合使用的，他们彼此是一种互补关系</p>
<ul>
<li>NoSQL运行在内存，解决效率问题<ul>
<li>I/O问题</li>
<li>效率问题</li>
</ul>
</li>
<li>MySQL运行在磁盘，解决稳定问题<ul>
<li>安全问题（永久存储）</li>
<li>稳定</li>
</ul>
</li>
</ul>
<h3 id="5、SQL基本介绍"><a href="#5、SQL基本介绍" class="headerlink" title="5、SQL基本介绍"></a>5、SQL基本介绍</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>SQL</strong>：Structured Query Language，结构化查询语言，是一种针对关系型数据库特殊标准化的编程语言</p>
<ul>
<li>SQL是一种编程语言</li>
<li>能够实现用户数据库查询和程序设计</li>
<li>SQL根据操作不同，分为基类<ul>
<li>DQL：Data Query Language，数据查询语言，用于查询和检索数据</li>
<li>DML：Data ManiPulation Language，数据操作语言，用于数据的写操作（增删改）</li>
<li>DDL：Data Definition Language，数据定义语言，用于创建数据结构</li>
<li>DCL：Data Control Language,数据控制语言，用于用户权限管理</li>
<li>TPL：Transaction Process Language，事物处理语言，辅助DML进行事务操作（因此也归属于DML）</li>
</ul>
</li>
</ul>
<h3 id="6、MySQL基本介绍"><a href="#6、MySQL基本介绍" class="headerlink" title="6、MySQL基本介绍"></a>6、MySQL基本介绍</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>MySQL</strong>：是瑞典AB公司下的一款关系型数据库</p>
<ul>
<li>MySQL当前属于甲骨文公司（AB-&gt;Sun-&gt;Oracle）</li>
<li>MySQL开源免费（部分存储引擎）</li>
<li>MySQL是一种C/S结构软件，因此需要MySQL的客户端来访问服务端（数据管理）<ul>
<li>mysqld.exe：服务端</li>
<li>mysql.exe：客户端</li>
</ul>
</li>
<li>MySQL使用SQL指令对数据库进行操作</li>
</ul>
<h3 id="7、MySQL访问"><a href="#7、MySQL访问" class="headerlink" title="7、MySQL访问"></a>7、MySQL访问</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>MySQL访问</strong>：就是客户端连接上服务端，然后实现数据操作的过程</p>
<ul>
<li>客户端访问服务端<ul>
<li>利用Windows控制台访问（MySQL客户端）</li>
<li>利用数据库管理工具（Navicat）</li>
</ul>
</li>
<li>客户端需要连接认证<ul>
<li>-h：主机地址（本机localhost可以省略）</li>
<li>-P：端口号（默认3306可以省略）</li>
<li>-u：用户名</li>
<li>-p：用户密码</li>
</ul>
</li>
<li>客户端连接上服务端就表示占用了一个资源，可以进行对应权限的操作<ul>
<li>MySQL数据库连接资源有限：单个服务器最多16384个 </li>
<li>连接资源不够了其他访问就要排队等待</li>
<li>用完尽可能释放资源</li>
</ul>
</li>
<li>客户端退出服务端<ul>
<li>\q</li>
<li>quit</li>
<li>exit</li>
</ul>
</li>
</ul>
<h1 id="MySQL基本操作"><a href="#MySQL基本操作" class="headerlink" title="MySQL基本操作"></a>MySQL基本操作</h1><ul>
<li>SQL基本语法</li>
<li>SQL库操作</li>
<li>SQL表操作</li>
<li>SQL数据操作</li>
</ul>
<h2 id="一、SQL语法规则"><a href="#一、SQL语法规则" class="headerlink" title="一、SQL语法规则"></a>一、SQL语法规则</h2><blockquote>
<p>概念</p>
</blockquote>
<p><strong>SQL语法规则</strong>：SQL是一种结构化编程语言</p>
<ul>
<li>基础SQL指令通常是以行为单位</li>
<li>SQL指令需要语句结束符，默认是英文分好：<code>;</code>、\g、\G<ul>
<li>\G：主要用于查询数据，立体展示结果</li>
</ul>
</li>
<li>SQL指令类似自然语言</li>
<li>编写的SQL中如果用到了关键字或保留字，需要使用反引号``来包裹，让系统忽略</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、结构创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create 结构类型 结构名 结构描述;</span><br></pre></td></tr></table></figure>



<p>2、显示结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#显示结构</span><br><span class="line">show 结构类型（复数）;</span><br><span class="line"></span><br><span class="line">#显示结构创建详情</span><br><span class="line">show create 结构类型 结构名</span><br></pre></td></tr></table></figure>



<p>3、数据操作（数据表）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#新增数据</span><br><span class="line">insert into 表名 values</span><br><span class="line"></span><br><span class="line">#查看数据</span><br><span class="line">select from 表名</span><br><span class="line"></span><br><span class="line">#更新数据</span><br><span class="line">update 表名 set</span><br><span class="line"></span><br><span class="line">#删除数据</span><br><span class="line">delete from 表名</span><br></pre></td></tr></table></figure>



<h2 id="二、SQL库操作"><a href="#二、SQL库操作" class="headerlink" title="二、SQL库操作"></a>二、SQL库操作</h2><ul>
<li>创建数据库</li>
<li>显示数据库</li>
<li>使用数据库</li>
<li>修改数据库</li>
<li>删除数据库</li>
</ul>
<h3 id="1、创建数据库"><a href="#1、创建数据库" class="headerlink" title="1、创建数据库"></a>1、创建数据库</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>创建数据库</strong>：根据项目需求创建一个存储数据的仓库</p>
<ul>
<li>使用create database 数据库名字创建<ul>
<li>数据库层面可以指定字符集：charset/character set</li>
<li>数据库层面可以指定校对集：collate</li>
</ul>
</li>
<li>创建数据库会在磁盘指定存放处产生一个文件夹</li>
<li>创建语法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database 数据库名字 [数据库选项]</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建一个指定名字的数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database db_1;</span><br></pre></td></tr></table></figure>
<p>2、创建一个指定字符集的数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database db_2 charset utf8MB4;</span><br></pre></td></tr></table></figure>
<p>3、创建一个指定校对集的数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database db_3 charset utf8MB4 collate utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>



<h3 id="2、显示数据库"><a href="#2、显示数据库" class="headerlink" title="2、显示数据库"></a>2、显示数据库</h3><blockquote>
<p>概念 </p>
</blockquote>
<p><strong>显示数据库</strong>：通过客户端指令来查看已有数据库</p>
<ul>
<li>数据库的查看是根据用户权限限定的</li>
<li>数据库的查看分为两种查看方式：<ul>
<li>查看全部数据库</li>
<li>查看数据库创建指令</li>
</ul>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、显示所有数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>
<p>2、显示数据库创建指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create database db_1;</span><br></pre></td></tr></table></figure>



<h3 id="3、使用数据库"><a href="#3、使用数据库" class="headerlink" title="3、使用数据库"></a>3、使用数据库</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>使用数据库</strong>：指在进行具体SQL指令之前，让系统知道操作针对的是哪个数据库</p>
<ul>
<li>数据库的操作通常是针对数据表或者数据</li>
<li>通过使用数据库可以让后续指令默认针对具体数据库环境</li>
<li>使用数据库语法：use 数据库名字;</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use db_1;</span><br></pre></td></tr></table></figure>



<h3 id="4、修改数据库"><a href="#4、修改数据库" class="headerlink" title="4、修改数据库"></a>4、修改数据库</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>修改数据库</strong>：修改数据库的相关库选项</p>
<ul>
<li>数据库名字不可修改（老版本可以）<ul>
<li>先新增</li>
<li>后迁移</li>
<li>最后删除</li>
</ul>
</li>
<li>数据库修改分为两个部分<ul>
<li>字符集</li>
<li>校对集</li>
</ul>
</li>
<li>数据库修改指令（与创建指令差不多）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database 数据库名字 库选项;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5、删除数据库"><a href="#5、删除数据库" class="headerlink" title="5、删除数据库"></a>5、删除数据库</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>删除数据库</strong>：将当前已有数据库删除</p>
<ul>
<li>删除数据库会删除数据库内所有的表和数据</li>
<li>删除数据库操作要慎重（删前备份）</li>
<li>删除数据库后，对应的存储文件夹就会消失</li>
<li>删除语法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database 数据库名字;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="三、SQL表（字段）操作"><a href="#三、SQL表（字段）操作" class="headerlink" title="三、SQL表（字段）操作"></a>三、SQL表（字段）操作</h2><ul>
<li><p>创建数据表</p>
</li>
<li><p>显示数据表</p>
</li>
<li><p>查看表结构</p>
</li>
<li><p>更改数据表</p>
</li>
<li><p>更改字段</p>
</li>
<li><p>删除数据表</p>
</li>
</ul>
<h3 id="1、创建数据表"><a href="#1、创建数据表" class="headerlink" title="1、创建数据表"></a>1、创建数据表</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>创建数据表</strong>：根据雨雾需求，确定数据表的字段信息，然后创建表结构</p>
<ul>
<li>表与字段不分家，相辅相成</li>
<li>表的创建需要指定存储的数据库<ul>
<li>明确指定数据库：<code>数据库.表名</code></li>
<li>先使用数据库：<code>use 数据库名字</code></li>
</ul>
</li>
<li>字段至少需要指定名字、类型</li>
<li>数据库表不限定字段数量<ul>
<li>每个字段间使用逗号<code>,</code>分隔</li>
<li>最后一个字段不需要逗号</li>
</ul>
</li>
<li>表可以指定表选项（都有默认值）<ul>
<li>存储引擎：engine[=]具体存储引擎</li>
<li>字符集：[default]charset具体字符集（继承数据库）</li>
<li>校对集：collate（继承数据库）</li>
</ul>
</li>
<li>表创建语法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table [数据库名.]表名(</span><br><span class="line">	字段名 字段类型,</span><br><span class="line">	...</span><br><span class="line">	字段名 字段类型</span><br><span class="line">)表选项;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建简单数据表（指定数据库创建数据表）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table db_2.t_1(</span><br><span class="line">	name varchar(50)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<p>2、创建数据表——多字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use db_2;</span><br><span class="line">create table t_2(</span><br><span class="line">	name varchar(50),</span><br><span class="line">	age int,</span><br><span class="line">	gender varchar(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<p>3、创建数据表——表选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_3(</span><br><span class="line">	name varchar(50)</span><br><span class="line">)engine Innodb charset utf8MB4;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>扩展：存储引擎是指数据存储和管理的方式，MySQL中提供了多种存储引擎，一般使用默认存储引擎</p>
<ul>
<li><p>InnoDB</p>
<ul>
<li>默认存储引擎</li>
<li>支持事物处理和外键</li>
<li>数据统一管理</li>
</ul>
</li>
<li><p>MyIsam</p>
<ul>
<li>支持事物和外键</li>
<li>结构、索引独立管理</li>
<li>L5.6以后不再维护</li>
</ul>
</li>
</ul>
<p>扩展：如果想创建一个与已有表一样的数据表，MySQL提供了一种便捷的复制模式</p>
<ul>
<li>create teble 表名 like 数据库名字.表名</li>
</ul>
</blockquote>
<h3 id="2、显示数据表"><a href="#2、显示数据表" class="headerlink" title="2、显示数据表"></a>2、显示数据表</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>显示数据表</strong>：客户端通过指令显示已有的数据表</p>
<ul>
<li>数据表的显示跟用户权限有关</li>
<li>显示数据表有两种方式<ul>
<li>显示所有数据表</li>
<li>显示具体数据表的创建指令</li>
</ul>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、显示所有数据表——当前数据库下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>



<p>2、显示所有数据表——指定数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables from db_3;</span><br></pre></td></tr></table></figure>



<p>3、显示部分关关联数据表——匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show table like &#x27;%like&#x27;; #%表示匹配多个字符  _表示匹配一个字符</span><br></pre></td></tr></table></figure>



<p>3、显示数据表的创建指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table t_1;   #看到的结果未必一定是真实创建的指令（系统会加工）</span><br></pre></td></tr></table></figure>



<h3 id="3、查看数据表"><a href="#3、查看数据表" class="headerlink" title="3、查看数据表"></a>3、查看数据表</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>查看数据表</strong>：指查看数据表中的具体结构</p>
<ul>
<li>通常是查看字段信息</li>
<li>详细的显示字段的各项信息</li>
<li>查看语法有三种（效果相同）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc 表名;</span><br><span class="line">describe 表名;</span><br><span class="line">show columns from 表名;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc t_1;</span><br></pre></td></tr></table></figure>



<h3 id="4、更改数据表"><a href="#4、更改数据表" class="headerlink" title="4、更改数据表"></a>4、更改数据表</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>更改数据表</strong>：修改表名字和表选项</p>
<ul>
<li>修改表名：<code>rename table 表名 to 新表名</code></li>
<li>修改表选项：<code>alter table 表名</code></li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、修改表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename table t_1 to t1;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：如果有时候想要跨库修改的话，需要使用<code>数据库名.表名</code></p>
<p>2、修改表选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t1 charset utf8;</span><br></pre></td></tr></table></figure>



<h3 id="5、更改字段"><a href="#5、更改字段" class="headerlink" title="5、更改字段"></a>5、更改字段</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>更改字段</strong>：指针对表创建好后，里面字段的增删改</p>
<ul>
<li>字段操作包括字段名字、类型和属性的操作</li>
<li>字段操作分为四类<ul>
<li>新增字段：add [colume]</li>
<li>更改字段名：change</li>
<li>修改类型：modify</li>
<li>删除字段：drop</li>
</ul>
</li>
<li>字段操作还有位置处理</li>
<li>字段操作通常是在表已经存在数据后进行</li>
</ul>
<h4 id="5-1、新增字段"><a href="#5-1、新增字段" class="headerlink" title="5.1、新增字段"></a>5.1、新增字段</h4><blockquote>
<p>概念</p>
</blockquote>
<p><strong>新增字段</strong>：在表创建好后往里面增加其他字段</p>
<ul>
<li>字段的新增必须同时存在字段类型</li>
<li>新增语法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 add [column] 字段名 字段类型 [字段属性] [字段位置]</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、给已经存在的t_3表增加一个字段age</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t_3 add age int;</span><br></pre></td></tr></table></figure>



<p>2、给已经存在的t_3表增加一个字段nickname</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t_3 add column nickname varchar(10);</span><br></pre></td></tr></table></figure>



<h4 id="5-2、字段位置"><a href="#5-2、字段位置" class="headerlink" title="5.2、字段位置"></a>5.2、字段位置</h4><blockquote>
<p>概念</p>
</blockquote>
<p><strong>字段位置</strong>：指字段放在某个指定字段之后</p>
<ul>
<li>字段位置分为两种<ul>
<li>第一个字段：first</li>
<li>某个字段之后：after 已存在字段名</li>
</ul>
</li>
<li>字段位置适用于追加字段、修改字段、更改字段名</li>
<li>字段位置语法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 字段操作 字段位置;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、为t_3表增加一个id字段，放到最前面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t_3 add id int first;</span><br></pre></td></tr></table></figure>



<p>2、在t_3表name字段后增加一个身份证字段card</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t_3 add card varchar(18) after name;</span><br></pre></td></tr></table></figure>



<h4 id="5-3、更改字段名"><a href="#5-3、更改字段名" class="headerlink" title="5.3、更改字段名"></a>5.3、更改字段名</h4><blockquote>
<p>概念</p>
</blockquote>
<p><strong>更改字段名</strong>：指对已经存在的字段名进行修改</p>
<ul>
<li>字段名的修改也必须跟上字段类型</li>
<li>字段名修改语法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 change 原字段名 新字段名 字段类型 [字段属性] [位置]</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>修改字段名 card 为 sfz</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t_3 change card sfz varchar(18);</span><br></pre></td></tr></table></figure>



<h4 id="5-4、修改字段"><a href="#5-4、修改字段" class="headerlink" title="5.4、修改字段"></a>5.4、修改字段</h4><blockquote>
<p>概念</p>
</blockquote>
<p><strong>修改字段</strong>：值修改字段的相关信息</p>
<ul>
<li>修改字段类型、字段属性和位置</li>
<li>修改字段语法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify 字段名 字段类型 [字段位置] [位置]；</span><br></pre></td></tr></table></figure>



<blockquote>
<p>示例</p>
</blockquote>
<p>修改身份证的类型为char(18)并且位置放到id后面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t_3 modify sfz char(18) after id;</span><br></pre></td></tr></table></figure>



<h3 id="6、删除字段"><a href="#6、删除字段" class="headerlink" title="6、删除字段"></a>6、删除字段</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>删除字段</strong>：将某个不要的字段从表中剔除</p>
<ul>
<li>删除字段会将数据也删除（不可逆）</li>
<li>删除字段语法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop 字段名;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>删除年龄字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t_3 drop age;</span><br></pre></td></tr></table></figure>



<h2 id="四、SQL数据操作"><a href="#四、SQL数据操作" class="headerlink" title="四、SQL数据操作"></a>四、SQL数据操作</h2><ul>
<li>新增数据</li>
<li>查看数据</li>
<li>更新数据</li>
<li>删除数据</li>
</ul>
<h3 id="1、新增数据"><a href="#1、新增数据" class="headerlink" title="1、新增数据"></a>1、新增数据</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>新增数据</strong>：将数据插入到数据表永久存储</p>
<ul>
<li>新增数据是根据表的字段顺序和数据类型要求将数据存放到数据表中</li>
<li>数据表中的数据以行为存储单位，实际存储属以字段存储数据</li>
<li>数据插入分两种方式<ul>
<li>全字段插入：<code>insert into 表名 values(字段列表顺序对应的所有值)；</code></li>
<li>部分字段插入： <code>insert into 表名 (字段列表) values(字段列表对应的值顺序列表);</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、给t_3表插入一条完整数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t_3 values(1,&#x27;440111200011111101&#x27;,&#x27;Jim&#x27;,&#x27;Green&#x27;);</span><br></pre></td></tr></table></figure>



<p>2、根据字段插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t_3 (id,sfz,name) values(2,&#x27;440111200011111101&#x27;,&#x27;Jim&#x27;);</span><br></pre></td></tr></table></figure>



<h3 id="2、查看数据"><a href="#2、查看数据" class="headerlink" title="2、查看数据"></a>2、查看数据</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>查看数据</strong>：将表中已经存在的数据按照指定的要求显示出来</p>
<ul>
<li><p>查到的数据显示出来是一张二维表</p>
</li>
<li><p>数据显示包含字段名和数据本身</p>
</li>
<li><p>数据查看分两种方式</p>
<ul>
<li>查看全部字段：使用<code>*</code>代替所有字段</li>
<li>查看部分字段：明确字段名，使用逗号分隔</li>
</ul>
</li>
<li><p>查看数据很多时候也是根据条件查询部分数据</p>
</li>
<li><p>查看语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *|字段列表 from 表名;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、查看t_3表中所有数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from t_3;</span><br></pre></td></tr></table></figure>



<p>2、查看t_3表中的name和身份证信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name,sfz from t_3;</span><br></pre></td></tr></table></figure>



<p>3、查看t_3表中id值为1的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from t_3 where id = 1;</span><br></pre></td></tr></table></figure>



<h3 id="3、更新数据"><a href="#3、更新数据" class="headerlink" title="3、更新数据"></a>3、更新数据</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>更新数据</strong>：即更新某个已有字段的值</p>
<ul>
<li>更新数据通常是根据条件更新某些数据，而不是全部记录都更新</li>
<li>更新数据语法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段 = 新值[,字段 = 新值] [where条件筛选];</span><br></pre></td></tr></table></figure>



<blockquote>
<p>示例</p>
</blockquote>
<p>1、更新所有记录的身份证信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update t_3 set sfz = &#x27;440100200010100001&#x27;;</span><br></pre></td></tr></table></figure>



<p>2、更新某个记录的多个字段数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update t_3 set name = &#x27;Lily&#x27;,sfz = &#x27;440100200010100002&#x27; where id = 1;</span><br></pre></td></tr></table></figure>



<h3 id="4、删除数据"><a href="#4、删除数据" class="headerlink" title="4、删除数据"></a>4、删除数据</h3><blockquote>
<p>概念</p>
</blockquote>
<p><strong>删除数据</strong>：将数据从已有数据表中清除</p>
<ul>
<li>删除数据是一种不可逆操作</li>
<li>数据删除通常都是有条件删除</li>
<li>数据删除语法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 [where条件]；</span><br></pre></td></tr></table></figure>



<blockquote>
<p>示例</p>
</blockquote>
<p>删除t_3表中id为2 的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from t_3 where id = 2;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
